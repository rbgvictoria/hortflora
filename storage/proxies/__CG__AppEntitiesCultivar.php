<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Cultivar extends \App\Entities\Cultivar implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'taxon', 'horticulturalGroup', 'name', 'taxonRank', 'nameAccordingTo', 'accepted', 'taxonRemarks', 'treatments', 'images', 'vernacularNames', 'changes', 'taxonReferences', 'id', 'guid', 'version', 'createdBy', 'modifiedBy', 'timestampCreated', 'timestampModified'];
        }

        return ['__isInitialized__', 'taxon', 'horticulturalGroup', 'name', 'taxonRank', 'nameAccordingTo', 'accepted', 'taxonRemarks', 'treatments', 'images', 'vernacularNames', 'changes', 'taxonReferences', 'id', 'guid', 'version', 'createdBy', 'modifiedBy', 'timestampCreated', 'timestampModified'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Cultivar $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getTaxon()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxon', []);

        return parent::getTaxon();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxon(\App\Entities\Taxon $taxon)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxon', [$taxon]);

        return parent::setTaxon($taxon);
    }

    /**
     * {@inheritDoc}
     */
    public function getHorticulturalGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHorticulturalGroup', []);

        return parent::getHorticulturalGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function setHorticulturalGroup($horticulturalGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHorticulturalGroup', [$horticulturalGroup]);

        return parent::setHorticulturalGroup($horticulturalGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(\App\Entities\Name $name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameAccordingTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameAccordingTo', []);

        return parent::getNameAccordingTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameAccordingTo($sensu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameAccordingTo', [$sensu]);

        return parent::setNameAccordingTo($sensu);
    }

    /**
     * {@inheritDoc}
     */
    public function getAcceptedNameUsage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAcceptedNameUsage', []);

        return parent::getAcceptedNameUsage();
    }

    /**
     * {@inheritDoc}
     */
    public function setAcceptedNameUsage(\App\Entities\Taxon $accepted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAcceptedNameUsage', [$accepted]);

        return parent::setAcceptedNameUsage($accepted);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxonRemarks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxonRemarks', []);

        return parent::getTaxonRemarks();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaxonRemarks($remarks)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaxonRemarks', [$remarks]);

        return parent::setTaxonRemarks($remarks);
    }

    /**
     * {@inheritDoc}
     */
    public function getTreatments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTreatments', []);

        return parent::getTreatments();
    }

    /**
     * {@inheritDoc}
     */
    public function addTreatment(\App\Entities\Treatment $treatment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTreatment', [$treatment]);

        return parent::addTreatment($treatment);
    }

    /**
     * {@inheritDoc}
     */
    public function getVernacularNames()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVernacularNames', []);

        return parent::getVernacularNames();
    }

    /**
     * {@inheritDoc}
     */
    public function addVernacularName(\App\Entities\VernacularName $vernacularName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVernacularName', [$vernacularName]);

        return parent::addVernacularName($vernacularName);
    }

    /**
     * {@inheritDoc}
     */
    public function getImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function addImage(\App\Entities\Image $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addImage', [$image]);

        return parent::addImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getChanges()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChanges', []);

        return parent::getChanges();
    }

    /**
     * {@inheritDoc}
     */
    public function addChange(\App\Entities\Change $change)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChange', [$change]);

        return parent::addChange($change);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaxonReferences()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaxonReferences', []);

        return parent::getTaxonReferences();
    }

    /**
     * {@inheritDoc}
     */
    public function addTaxonReference(\App\Entities\TaxonReference $taxonReference)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTaxonReference', [$taxonReference]);

        return parent::addTaxonReference($taxonReference);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', []);

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', []);

        return parent::setVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function incrementVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incrementVersion', []);

        return parent::incrementVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getGuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGuid', []);

        return parent::getGuid();
    }

    /**
     * {@inheritDoc}
     */
    public function setGuid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGuid', []);

        return parent::setGuid();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', []);

        return parent::setCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedBy', []);

        return parent::getModifiedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedBy', []);

        return parent::setModifiedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getTimestampCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimestampCreated', []);

        return parent::getTimestampCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimestampCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimestampCreated', []);

        return parent::setTimestampCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getTimestampModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimestampModified', []);

        return parent::getTimestampModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimestampModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimestampModified', []);

        return parent::setTimestampModified();
    }

}
